/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package elasticsearchdomain

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/elasticsearchservice"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane/provider-aws/apis/elasticsearchservice/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeElasticsearchDomainInput returns input for read
// operation.
func GenerateDescribeElasticsearchDomainInput(cr *svcapitypes.ElasticsearchDomain) *svcsdk.DescribeElasticsearchDomainInput {
	res := &svcsdk.DescribeElasticsearchDomainInput{}

	if cr.Spec.ForProvider.DomainName != nil {
		res.SetDomainName(*cr.Spec.ForProvider.DomainName)
	}

	return res
}

// GenerateElasticsearchDomain returns the current state in the form of *svcapitypes.ElasticsearchDomain.
func GenerateElasticsearchDomain(resp *svcsdk.DescribeElasticsearchDomainOutput) *svcapitypes.ElasticsearchDomain {
	cr := &svcapitypes.ElasticsearchDomain{}

	if resp.DomainStatus.ARN != nil {
		cr.Status.AtProvider.ARN = resp.DomainStatus.ARN
	} else {
		cr.Status.AtProvider.ARN = nil
	}
	if resp.DomainStatus.AccessPolicies != nil {
		cr.Spec.ForProvider.AccessPolicies = resp.DomainStatus.AccessPolicies
	} else {
		cr.Spec.ForProvider.AccessPolicies = nil
	}
	if resp.DomainStatus.AdvancedOptions != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range resp.DomainStatus.AdvancedOptions {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		cr.Spec.ForProvider.AdvancedOptions = f2
	} else {
		cr.Spec.ForProvider.AdvancedOptions = nil
	}
	if resp.DomainStatus.AdvancedSecurityOptions != nil {
		f3 := &svcapitypes.AdvancedSecurityOptionsInput{}
		if resp.DomainStatus.AdvancedSecurityOptions.Enabled != nil {
			f3.Enabled = resp.DomainStatus.AdvancedSecurityOptions.Enabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f3.InternalUserDatabaseEnabled = resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions != nil {
			f3f2 := &svcapitypes.SAMLOptionsInput{}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f3f2.Enabled = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp != nil {
				f3f2f1 := &svcapitypes.SAMLIDp{}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId != nil {
					f3f2f1.EntityID = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId
				}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent != nil {
					f3f2f1.MetadataContent = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent
				}
				f3f2.IDp = f3f2f1
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f3f2.RolesKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f3f2.SessionTimeoutMinutes = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f3f2.SubjectKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey
			}
			f3.SAMLOptions = f3f2
		}
		cr.Spec.ForProvider.AdvancedSecurityOptions = f3
	} else {
		cr.Spec.ForProvider.AdvancedSecurityOptions = nil
	}
	if resp.DomainStatus.AutoTuneOptions != nil {
		f4 := &svcapitypes.AutoTuneOptionsInput{}
		cr.Spec.ForProvider.AutoTuneOptions = f4
	} else {
		cr.Spec.ForProvider.AutoTuneOptions = nil
	}
	if resp.DomainStatus.CognitoOptions != nil {
		f5 := &svcapitypes.CognitoOptions{}
		if resp.DomainStatus.CognitoOptions.Enabled != nil {
			f5.Enabled = resp.DomainStatus.CognitoOptions.Enabled
		}
		if resp.DomainStatus.CognitoOptions.IdentityPoolId != nil {
			f5.IdentityPoolID = resp.DomainStatus.CognitoOptions.IdentityPoolId
		}
		if resp.DomainStatus.CognitoOptions.RoleArn != nil {
			f5.RoleARN = resp.DomainStatus.CognitoOptions.RoleArn
		}
		if resp.DomainStatus.CognitoOptions.UserPoolId != nil {
			f5.UserPoolID = resp.DomainStatus.CognitoOptions.UserPoolId
		}
		cr.Spec.ForProvider.CognitoOptions = f5
	} else {
		cr.Spec.ForProvider.CognitoOptions = nil
	}
	if resp.DomainStatus.Created != nil {
		cr.Status.AtProvider.Created = resp.DomainStatus.Created
	} else {
		cr.Status.AtProvider.Created = nil
	}
	if resp.DomainStatus.Deleted != nil {
		cr.Status.AtProvider.Deleted = resp.DomainStatus.Deleted
	} else {
		cr.Status.AtProvider.Deleted = nil
	}
	if resp.DomainStatus.DomainEndpointOptions != nil {
		f8 := &svcapitypes.DomainEndpointOptions{}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpoint != nil {
			f8.CustomEndpoint = resp.DomainStatus.DomainEndpointOptions.CustomEndpoint
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn != nil {
			f8.CustomEndpointCertificateARN = resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f8.CustomEndpointEnabled = resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled
		}
		if resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS != nil {
			f8.EnforceHTTPS = resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS
		}
		if resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f8.TLSSecurityPolicy = resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy
		}
		cr.Spec.ForProvider.DomainEndpointOptions = f8
	} else {
		cr.Spec.ForProvider.DomainEndpointOptions = nil
	}
	if resp.DomainStatus.DomainId != nil {
		cr.Status.AtProvider.DomainID = resp.DomainStatus.DomainId
	} else {
		cr.Status.AtProvider.DomainID = nil
	}
	if resp.DomainStatus.DomainName != nil {
		cr.Spec.ForProvider.DomainName = resp.DomainStatus.DomainName
	} else {
		cr.Spec.ForProvider.DomainName = nil
	}
	if resp.DomainStatus.EBSOptions != nil {
		f11 := &svcapitypes.EBSOptions{}
		if resp.DomainStatus.EBSOptions.EBSEnabled != nil {
			f11.EBSEnabled = resp.DomainStatus.EBSOptions.EBSEnabled
		}
		if resp.DomainStatus.EBSOptions.Iops != nil {
			f11.IOPS = resp.DomainStatus.EBSOptions.Iops
		}
		if resp.DomainStatus.EBSOptions.VolumeSize != nil {
			f11.VolumeSize = resp.DomainStatus.EBSOptions.VolumeSize
		}
		if resp.DomainStatus.EBSOptions.VolumeType != nil {
			f11.VolumeType = resp.DomainStatus.EBSOptions.VolumeType
		}
		cr.Spec.ForProvider.EBSOptions = f11
	} else {
		cr.Spec.ForProvider.EBSOptions = nil
	}
	if resp.DomainStatus.ElasticsearchClusterConfig != nil {
		f12 := &svcapitypes.ElasticsearchClusterConfig{}
		if resp.DomainStatus.ElasticsearchClusterConfig.ColdStorageOptions != nil {
			f12f0 := &svcapitypes.ColdStorageOptions{}
			if resp.DomainStatus.ElasticsearchClusterConfig.ColdStorageOptions.Enabled != nil {
				f12f0.Enabled = resp.DomainStatus.ElasticsearchClusterConfig.ColdStorageOptions.Enabled
			}
			f12.ColdStorageOptions = f12f0
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount != nil {
			f12.DedicatedMasterCount = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled != nil {
			f12.DedicatedMasterEnabled = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType != nil {
			f12.DedicatedMasterType = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.InstanceCount != nil {
			f12.InstanceCount = resp.DomainStatus.ElasticsearchClusterConfig.InstanceCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.InstanceType != nil {
			f12.InstanceType = resp.DomainStatus.ElasticsearchClusterConfig.InstanceType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmCount != nil {
			f12.WarmCount = resp.DomainStatus.ElasticsearchClusterConfig.WarmCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmEnabled != nil {
			f12.WarmEnabled = resp.DomainStatus.ElasticsearchClusterConfig.WarmEnabled
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmType != nil {
			f12.WarmType = resp.DomainStatus.ElasticsearchClusterConfig.WarmType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig != nil {
			f12f9 := &svcapitypes.ZoneAwarenessConfig{}
			if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f12f9.AvailabilityZoneCount = resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount
			}
			f12.ZoneAwarenessConfig = f12f9
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled != nil {
			f12.ZoneAwarenessEnabled = resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled
		}
		cr.Spec.ForProvider.ElasticsearchClusterConfig = f12
	} else {
		cr.Spec.ForProvider.ElasticsearchClusterConfig = nil
	}
	if resp.DomainStatus.ElasticsearchVersion != nil {
		cr.Spec.ForProvider.ElasticsearchVersion = resp.DomainStatus.ElasticsearchVersion
	} else {
		cr.Spec.ForProvider.ElasticsearchVersion = nil
	}
	if resp.DomainStatus.EncryptionAtRestOptions != nil {
		f14 := &svcapitypes.EncryptionAtRestOptions{}
		if resp.DomainStatus.EncryptionAtRestOptions.Enabled != nil {
			f14.Enabled = resp.DomainStatus.EncryptionAtRestOptions.Enabled
		}
		if resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId != nil {
			f14.KMSKeyID = resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId
		}
		cr.Spec.ForProvider.EncryptionAtRestOptions = f14
	} else {
		cr.Spec.ForProvider.EncryptionAtRestOptions = nil
	}
	if resp.DomainStatus.Endpoint != nil {
		cr.Status.AtProvider.Endpoint = resp.DomainStatus.Endpoint
	} else {
		cr.Status.AtProvider.Endpoint = nil
	}
	if resp.DomainStatus.Endpoints != nil {
		f16 := map[string]*string{}
		for f16key, f16valiter := range resp.DomainStatus.Endpoints {
			var f16val string
			f16val = *f16valiter
			f16[f16key] = &f16val
		}
		cr.Status.AtProvider.Endpoints = f16
	} else {
		cr.Status.AtProvider.Endpoints = nil
	}
	if resp.DomainStatus.LogPublishingOptions != nil {
		f17 := map[string]*svcapitypes.LogPublishingOption{}
		for f17key, f17valiter := range resp.DomainStatus.LogPublishingOptions {
			f17val := &svcapitypes.LogPublishingOption{}
			if f17valiter.CloudWatchLogsLogGroupArn != nil {
				f17val.CloudWatchLogsLogGroupARN = f17valiter.CloudWatchLogsLogGroupArn
			}
			if f17valiter.Enabled != nil {
				f17val.Enabled = f17valiter.Enabled
			}
			f17[f17key] = f17val
		}
		cr.Spec.ForProvider.LogPublishingOptions = f17
	} else {
		cr.Spec.ForProvider.LogPublishingOptions = nil
	}
	if resp.DomainStatus.NodeToNodeEncryptionOptions != nil {
		f18 := &svcapitypes.NodeToNodeEncryptionOptions{}
		if resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled != nil {
			f18.Enabled = resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled
		}
		cr.Spec.ForProvider.NodeToNodeEncryptionOptions = f18
	} else {
		cr.Spec.ForProvider.NodeToNodeEncryptionOptions = nil
	}
	if resp.DomainStatus.Processing != nil {
		cr.Status.AtProvider.Processing = resp.DomainStatus.Processing
	} else {
		cr.Status.AtProvider.Processing = nil
	}
	if resp.DomainStatus.ServiceSoftwareOptions != nil {
		f20 := &svcapitypes.ServiceSoftwareOptions{}
		if resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate != nil {
			f20.AutomatedUpdateDate = &metav1.Time{*resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate}
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Cancellable != nil {
			f20.Cancellable = resp.DomainStatus.ServiceSoftwareOptions.Cancellable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion != nil {
			f20.CurrentVersion = resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Description != nil {
			f20.Description = resp.DomainStatus.ServiceSoftwareOptions.Description
		}
		if resp.DomainStatus.ServiceSoftwareOptions.NewVersion != nil {
			f20.NewVersion = resp.DomainStatus.ServiceSoftwareOptions.NewVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment != nil {
			f20.OptionalDeployment = resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable != nil {
			f20.UpdateAvailable = resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus != nil {
			f20.UpdateStatus = resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus
		}
		cr.Status.AtProvider.ServiceSoftwareOptions = f20
	} else {
		cr.Status.AtProvider.ServiceSoftwareOptions = nil
	}
	if resp.DomainStatus.SnapshotOptions != nil {
		f21 := &svcapitypes.SnapshotOptions{}
		if resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour != nil {
			f21.AutomatedSnapshotStartHour = resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour
		}
		cr.Spec.ForProvider.SnapshotOptions = f21
	} else {
		cr.Spec.ForProvider.SnapshotOptions = nil
	}
	if resp.DomainStatus.UpgradeProcessing != nil {
		cr.Status.AtProvider.UpgradeProcessing = resp.DomainStatus.UpgradeProcessing
	} else {
		cr.Status.AtProvider.UpgradeProcessing = nil
	}
	if resp.DomainStatus.VPCOptions != nil {
		f23 := &svcapitypes.VPCOptions{}
		if resp.DomainStatus.VPCOptions.SecurityGroupIds != nil {
			f23f1 := []*string{}
			for _, f23f1iter := range resp.DomainStatus.VPCOptions.SecurityGroupIds {
				var f23f1elem string
				f23f1elem = *f23f1iter
				f23f1 = append(f23f1, &f23f1elem)
			}
			f23.SecurityGroupIDs = f23f1
		}
		if resp.DomainStatus.VPCOptions.SubnetIds != nil {
			f23f2 := []*string{}
			for _, f23f2iter := range resp.DomainStatus.VPCOptions.SubnetIds {
				var f23f2elem string
				f23f2elem = *f23f2iter
				f23f2 = append(f23f2, &f23f2elem)
			}
			f23.SubnetIDs = f23f2
		}
		cr.Spec.ForProvider.VPCOptions = f23
	} else {
		cr.Spec.ForProvider.VPCOptions = nil
	}

	return cr
}

// GenerateCreateElasticsearchDomainInput returns a create input.
func GenerateCreateElasticsearchDomainInput(cr *svcapitypes.ElasticsearchDomain) *svcsdk.CreateElasticsearchDomainInput {
	res := &svcsdk.CreateElasticsearchDomainInput{}

	if cr.Spec.ForProvider.AccessPolicies != nil {
		res.SetAccessPolicies(*cr.Spec.ForProvider.AccessPolicies)
	}
	if cr.Spec.ForProvider.AdvancedOptions != nil {
		f1 := map[string]*string{}
		for f1key, f1valiter := range cr.Spec.ForProvider.AdvancedOptions {
			var f1val string
			f1val = *f1valiter
			f1[f1key] = &f1val
		}
		res.SetAdvancedOptions(f1)
	}
	if cr.Spec.ForProvider.AdvancedSecurityOptions != nil {
		f2 := &svcsdk.AdvancedSecurityOptionsInput{}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.Enabled != nil {
			f2.SetEnabled(*cr.Spec.ForProvider.AdvancedSecurityOptions.Enabled)
		}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f2.SetInternalUserDatabaseEnabled(*cr.Spec.ForProvider.AdvancedSecurityOptions.InternalUserDatabaseEnabled)
		}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions != nil {
			f2f2 := &svcsdk.MasterUserOptions{}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserARN != nil {
				f2f2.SetMasterUserARN(*cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserARN)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserName != nil {
				f2f2.SetMasterUserName(*cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserName)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserPassword != nil {
				f2f2.SetMasterUserPassword(*cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserPassword)
			}
			f2.SetMasterUserOptions(f2f2)
		}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions != nil {
			f2f3 := &svcsdk.SAMLOptionsInput{}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f2f3.SetEnabled(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.Enabled)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp != nil {
				f2f3f1 := &svcsdk.SAMLIdp{}
				if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp.EntityID != nil {
					f2f3f1.SetEntityId(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp.EntityID)
				}
				if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp.MetadataContent != nil {
					f2f3f1.SetMetadataContent(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp.MetadataContent)
				}
				f2f3.SetIdp(f2f3f1)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.MasterBackendRole != nil {
				f2f3.SetMasterBackendRole(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.MasterBackendRole)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.MasterUserName != nil {
				f2f3.SetMasterUserName(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.MasterUserName)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f2f3.SetRolesKey(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.RolesKey)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f2f3.SetSessionTimeoutMinutes(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f2f3.SetSubjectKey(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.SubjectKey)
			}
			f2.SetSAMLOptions(f2f3)
		}
		res.SetAdvancedSecurityOptions(f2)
	}
	if cr.Spec.ForProvider.AutoTuneOptions != nil {
		f3 := &svcsdk.AutoTuneOptionsInput{}
		if cr.Spec.ForProvider.AutoTuneOptions.DesiredState != nil {
			f3.SetDesiredState(*cr.Spec.ForProvider.AutoTuneOptions.DesiredState)
		}
		if cr.Spec.ForProvider.AutoTuneOptions.MaintenanceSchedules != nil {
			f3f1 := []*svcsdk.AutoTuneMaintenanceSchedule{}
			for _, f3f1iter := range cr.Spec.ForProvider.AutoTuneOptions.MaintenanceSchedules {
				f3f1elem := &svcsdk.AutoTuneMaintenanceSchedule{}
				if f3f1iter.CronExpressionForRecurrence != nil {
					f3f1elem.SetCronExpressionForRecurrence(*f3f1iter.CronExpressionForRecurrence)
				}
				if f3f1iter.Duration != nil {
					f3f1elemf1 := &svcsdk.Duration{}
					if f3f1iter.Duration.Unit != nil {
						f3f1elemf1.SetUnit(*f3f1iter.Duration.Unit)
					}
					if f3f1iter.Duration.Value != nil {
						f3f1elemf1.SetValue(*f3f1iter.Duration.Value)
					}
					f3f1elem.SetDuration(f3f1elemf1)
				}
				if f3f1iter.StartAt != nil {
					f3f1elem.SetStartAt(f3f1iter.StartAt.Time)
				}
				f3f1 = append(f3f1, f3f1elem)
			}
			f3.SetMaintenanceSchedules(f3f1)
		}
		res.SetAutoTuneOptions(f3)
	}
	if cr.Spec.ForProvider.CognitoOptions != nil {
		f4 := &svcsdk.CognitoOptions{}
		if cr.Spec.ForProvider.CognitoOptions.Enabled != nil {
			f4.SetEnabled(*cr.Spec.ForProvider.CognitoOptions.Enabled)
		}
		if cr.Spec.ForProvider.CognitoOptions.IdentityPoolID != nil {
			f4.SetIdentityPoolId(*cr.Spec.ForProvider.CognitoOptions.IdentityPoolID)
		}
		if cr.Spec.ForProvider.CognitoOptions.RoleARN != nil {
			f4.SetRoleArn(*cr.Spec.ForProvider.CognitoOptions.RoleARN)
		}
		if cr.Spec.ForProvider.CognitoOptions.UserPoolID != nil {
			f4.SetUserPoolId(*cr.Spec.ForProvider.CognitoOptions.UserPoolID)
		}
		res.SetCognitoOptions(f4)
	}
	if cr.Spec.ForProvider.DomainEndpointOptions != nil {
		f5 := &svcsdk.DomainEndpointOptions{}
		if cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpoint != nil {
			f5.SetCustomEndpoint(*cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpoint)
		}
		if cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpointCertificateARN != nil {
			f5.SetCustomEndpointCertificateArn(*cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpointCertificateARN)
		}
		if cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f5.SetCustomEndpointEnabled(*cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpointEnabled)
		}
		if cr.Spec.ForProvider.DomainEndpointOptions.EnforceHTTPS != nil {
			f5.SetEnforceHTTPS(*cr.Spec.ForProvider.DomainEndpointOptions.EnforceHTTPS)
		}
		if cr.Spec.ForProvider.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f5.SetTLSSecurityPolicy(*cr.Spec.ForProvider.DomainEndpointOptions.TLSSecurityPolicy)
		}
		res.SetDomainEndpointOptions(f5)
	}
	if cr.Spec.ForProvider.DomainName != nil {
		res.SetDomainName(*cr.Spec.ForProvider.DomainName)
	}
	if cr.Spec.ForProvider.EBSOptions != nil {
		f7 := &svcsdk.EBSOptions{}
		if cr.Spec.ForProvider.EBSOptions.EBSEnabled != nil {
			f7.SetEBSEnabled(*cr.Spec.ForProvider.EBSOptions.EBSEnabled)
		}
		if cr.Spec.ForProvider.EBSOptions.IOPS != nil {
			f7.SetIops(*cr.Spec.ForProvider.EBSOptions.IOPS)
		}
		if cr.Spec.ForProvider.EBSOptions.VolumeSize != nil {
			f7.SetVolumeSize(*cr.Spec.ForProvider.EBSOptions.VolumeSize)
		}
		if cr.Spec.ForProvider.EBSOptions.VolumeType != nil {
			f7.SetVolumeType(*cr.Spec.ForProvider.EBSOptions.VolumeType)
		}
		res.SetEBSOptions(f7)
	}
	if cr.Spec.ForProvider.ElasticsearchClusterConfig != nil {
		f8 := &svcsdk.ElasticsearchClusterConfig{}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.ColdStorageOptions != nil {
			f8f0 := &svcsdk.ColdStorageOptions{}
			if cr.Spec.ForProvider.ElasticsearchClusterConfig.ColdStorageOptions.Enabled != nil {
				f8f0.SetEnabled(*cr.Spec.ForProvider.ElasticsearchClusterConfig.ColdStorageOptions.Enabled)
			}
			f8.SetColdStorageOptions(f8f0)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.DedicatedMasterCount != nil {
			f8.SetDedicatedMasterCount(*cr.Spec.ForProvider.ElasticsearchClusterConfig.DedicatedMasterCount)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.DedicatedMasterEnabled != nil {
			f8.SetDedicatedMasterEnabled(*cr.Spec.ForProvider.ElasticsearchClusterConfig.DedicatedMasterEnabled)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.DedicatedMasterType != nil {
			f8.SetDedicatedMasterType(*cr.Spec.ForProvider.ElasticsearchClusterConfig.DedicatedMasterType)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.InstanceCount != nil {
			f8.SetInstanceCount(*cr.Spec.ForProvider.ElasticsearchClusterConfig.InstanceCount)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.InstanceType != nil {
			f8.SetInstanceType(*cr.Spec.ForProvider.ElasticsearchClusterConfig.InstanceType)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.WarmCount != nil {
			f8.SetWarmCount(*cr.Spec.ForProvider.ElasticsearchClusterConfig.WarmCount)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.WarmEnabled != nil {
			f8.SetWarmEnabled(*cr.Spec.ForProvider.ElasticsearchClusterConfig.WarmEnabled)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.WarmType != nil {
			f8.SetWarmType(*cr.Spec.ForProvider.ElasticsearchClusterConfig.WarmType)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.ZoneAwarenessConfig != nil {
			f8f9 := &svcsdk.ZoneAwarenessConfig{}
			if cr.Spec.ForProvider.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f8f9.SetAvailabilityZoneCount(*cr.Spec.ForProvider.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount)
			}
			f8.SetZoneAwarenessConfig(f8f9)
		}
		if cr.Spec.ForProvider.ElasticsearchClusterConfig.ZoneAwarenessEnabled != nil {
			f8.SetZoneAwarenessEnabled(*cr.Spec.ForProvider.ElasticsearchClusterConfig.ZoneAwarenessEnabled)
		}
		res.SetElasticsearchClusterConfig(f8)
	}
	if cr.Spec.ForProvider.ElasticsearchVersion != nil {
		res.SetElasticsearchVersion(*cr.Spec.ForProvider.ElasticsearchVersion)
	}
	if cr.Spec.ForProvider.EncryptionAtRestOptions != nil {
		f10 := &svcsdk.EncryptionAtRestOptions{}
		if cr.Spec.ForProvider.EncryptionAtRestOptions.Enabled != nil {
			f10.SetEnabled(*cr.Spec.ForProvider.EncryptionAtRestOptions.Enabled)
		}
		if cr.Spec.ForProvider.EncryptionAtRestOptions.KMSKeyID != nil {
			f10.SetKmsKeyId(*cr.Spec.ForProvider.EncryptionAtRestOptions.KMSKeyID)
		}
		res.SetEncryptionAtRestOptions(f10)
	}
	if cr.Spec.ForProvider.LogPublishingOptions != nil {
		f11 := map[string]*svcsdk.LogPublishingOption{}
		for f11key, f11valiter := range cr.Spec.ForProvider.LogPublishingOptions {
			f11val := &svcsdk.LogPublishingOption{}
			if f11valiter.CloudWatchLogsLogGroupARN != nil {
				f11val.SetCloudWatchLogsLogGroupArn(*f11valiter.CloudWatchLogsLogGroupARN)
			}
			if f11valiter.Enabled != nil {
				f11val.SetEnabled(*f11valiter.Enabled)
			}
			f11[f11key] = f11val
		}
		res.SetLogPublishingOptions(f11)
	}
	if cr.Spec.ForProvider.NodeToNodeEncryptionOptions != nil {
		f12 := &svcsdk.NodeToNodeEncryptionOptions{}
		if cr.Spec.ForProvider.NodeToNodeEncryptionOptions.Enabled != nil {
			f12.SetEnabled(*cr.Spec.ForProvider.NodeToNodeEncryptionOptions.Enabled)
		}
		res.SetNodeToNodeEncryptionOptions(f12)
	}
	if cr.Spec.ForProvider.SnapshotOptions != nil {
		f13 := &svcsdk.SnapshotOptions{}
		if cr.Spec.ForProvider.SnapshotOptions.AutomatedSnapshotStartHour != nil {
			f13.SetAutomatedSnapshotStartHour(*cr.Spec.ForProvider.SnapshotOptions.AutomatedSnapshotStartHour)
		}
		res.SetSnapshotOptions(f13)
	}
	if cr.Spec.ForProvider.TagList != nil {
		f14 := []*svcsdk.Tag{}
		for _, f14iter := range cr.Spec.ForProvider.TagList {
			f14elem := &svcsdk.Tag{}
			if f14iter.Key != nil {
				f14elem.SetKey(*f14iter.Key)
			}
			if f14iter.Value != nil {
				f14elem.SetValue(*f14iter.Value)
			}
			f14 = append(f14, f14elem)
		}
		res.SetTagList(f14)
	}
	if cr.Spec.ForProvider.VPCOptions != nil {
		f15 := &svcsdk.VPCOptions{}
		if cr.Spec.ForProvider.VPCOptions.SecurityGroupIDs != nil {
			f15f0 := []*string{}
			for _, f15f0iter := range cr.Spec.ForProvider.VPCOptions.SecurityGroupIDs {
				var f15f0elem string
				f15f0elem = *f15f0iter
				f15f0 = append(f15f0, &f15f0elem)
			}
			f15.SetSecurityGroupIds(f15f0)
		}
		if cr.Spec.ForProvider.VPCOptions.SubnetIDs != nil {
			f15f1 := []*string{}
			for _, f15f1iter := range cr.Spec.ForProvider.VPCOptions.SubnetIDs {
				var f15f1elem string
				f15f1elem = *f15f1iter
				f15f1 = append(f15f1, &f15f1elem)
			}
			f15.SetSubnetIds(f15f1)
		}
		res.SetVPCOptions(f15)
	}

	return res
}

// GenerateDeleteElasticsearchDomainInput returns a deletion input.
func GenerateDeleteElasticsearchDomainInput(cr *svcapitypes.ElasticsearchDomain) *svcsdk.DeleteElasticsearchDomainInput {
	res := &svcsdk.DeleteElasticsearchDomainInput{}

	if cr.Spec.ForProvider.DomainName != nil {
		res.SetDomainName(*cr.Spec.ForProvider.DomainName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
